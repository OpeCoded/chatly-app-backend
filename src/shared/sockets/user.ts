import { ILogin, ISocketData } from '@user/interfaces/user.interface';
import { Server, Socket } from 'socket.io';

/*
socket.on(): event come from the frontend
socket.emit(): data sent back to the frontend

connectedUsersMap: this will holds all users who signed in, it's being exported to be used in sockets > chats.ts
Map<string, string>: <KEY, VALUE>
users: holds the usernames of all users that logged in (ONLINE USERS)

*/
export let socketIOUserObject: Server;
export const connectedUsersMap: Map<string, string> = new Map();
let users: string[] = [];

export class SocketIOUserHandler {
  private io: Server;

  constructor(io: Server) {
    this.io = io;
    socketIOUserObject = io;
  }

  /*
  socket.on('setup'): listening to a login action through addClientToMap()
  */
  public listen(): void {
    this.io.on('connection', (socket: Socket) => {
      socket.on('setup', (data: ILogin) => {
        this.addClientToMap(data.userId, socket.id);
        this.addUser(data.userId);
        this.io.emit('user online', users);
      });

      socket.on('block user', (data: ISocketData) => {
        this.io.emit('blocked user id', data);
      });

      socket.on('unblock user', (data: ISocketData) => {
        this.io.emit('unblocked user id', data);
      });

      socket.on('disconnect', () => {
        this.removeClientFromMap(socket.id);
      });
    });
  }

  /*
  addClientToMap: this adds logged in user data to the connectedUsersMap
  (username: string, socketId: string): KEY, VALUE
  connectedUsersMap.set(): is used to add the key, value
  socketId: is auto generated by socketIO
  !connectedUsersMap.has(): checks if the username already exists in the map
  */
  private addClientToMap(username: string, socketId: string): void {
    if (!connectedUsersMap.has(username)) {
      connectedUsersMap.set(username, socketId);
    }
  }

  /*
removeClientFromMap: this removes a logged in user data from the connectedUsersMap
Array.from: converts to an array, then checks if the sockedId exists in the Array ( i.e connectedUsersMap)
disconnectedUser: finds a match for the user and socketId in the connectedUsersMap and then delete it
=>: return
user[1]: the user we want to get is at index 1
disconnectedUser[0]: the user removed is at index 0
  */
  private removeClientFromMap(socketId: string): void {
    if (Array.from(connectedUsersMap.values()).includes(socketId)) {
      const disconnectedUser: [string, string] = [...connectedUsersMap].find(
        (user: [string, string]) => {
          return user[1] === socketId;
        }
      ) as [string, string];
      connectedUsersMap.delete(disconnectedUser[0]);
      this.removeUser(disconnectedUser[0]);
      this.io.emit('user online', users);
    }
  }

  /*
  addUser: this method is used to add usernames of users that logs in to the users[]
  [...new Set(users)]: this is used to remove duplicate username inside the users[] OR prevents adding duplicate usernames to the list
  */
  private addUser(username: string): void {
    users.push(username);
    users = [...new Set(users)];
  }

  /*
  removeUser: this method is used to remove usernames of users that logs out from the user[]
  */
  private removeUser(username: string): void {
    users = users.filter((name: string) => name != username);
  }
}
